<?php
/**
 * @file
 * Tests for taxonomy_menu.module.
 */

// Since we are extending TaxonomyWebTestCase we need to include this file.
include_once(BACKDROP_ROOT . '/core/modules/taxonomy/tests/taxonomy.test');

/**
 * Class with common helper methods.
 */
class TaxonomyMenuWebTestCase extends TaxonomyWebTestCase {

  /**
   * Create a new term record.
   */
  function createNewTerm($vocabulary, $name = NULL, $parent = NULL) {
    $term = entity_create('taxonomy_term', array(
      'name' => ($name === NULL) ? $this->randomName() : $name,
      'description' => $this->randomName(),
      'format' => filter_default_format(),
      'vocabulary' => $vocabulary->machine_name,
      'langcode' => LANGUAGE_NONE,
      'parent' => ($parent !== NULL) ? array($parent->tid) : NULL,
    ));
    taxonomy_term_save($term);
    return $term;
  }

}

/**
 * Tests for taxonomy vocabulary functions.
 */
class TaxonomyMenuUnitTest extends TaxonomyMenuWebTestCase {

  function setUp() {
    parent::setUp('taxonomy_menu');

    // Create an admin user and log them in.
    $perms = array(
      'access administration pages',
      'administer layouts',
      'administer taxonomy',
      'administer menu',
      'administer nodes',
      'create post content',
      'create page content',
      'edit any post content',
      'edit any page content',
      'delete any post content',
      'delete any page content',
      'access content overview',
    );
    $this->adminUser = $this->backdropCreateUser($perms);
    $this->backdropLogin($this->adminUser);

    $this->vocabulary = $this->createVocabulary();
    $this->term = $this->createTerm($this->vocabulary);
  }

  function testTaxonomyMenuCRUD() {
    $this->backdropGet('admin/structure/taxonomy/' . $this->vocabulary->machine_name . '/configure');
    $edit = array();
    $edit['taxonomy_menu[vocab_parent]'] = 'user-menu:0';
    $this->backdropPost(NULL, $edit, 'Save');
    $this->assertResponse(200);

    $term = $this->term;
    // Confirm the link is there.
    $this->assertLink($term->name);
    // Delete the term.
    taxonomy_term_delete($term->tid);
    $this->backdropGet('<front>');
    // Confirm the link is gone.
    $this->assertNoLink($term->name);
  }

  function testTaxonomyMenuCustomMenu() {
    // Create a custom menu.
    $edit = array();
    $custom_name = $this->randomName(16);
    $machine_name = backdrop_substr(hash('sha256', $custom_name), 0, MENU_MAX_MENU_NAME_LENGTH_UI);
    $edit['title'] = $custom_name;
    $edit['menu_name'] = $machine_name;
    $this->backdropPost('admin/structure/menu/add', $edit, 'Save');

    // Edit the home page layout.
    $this->backdropGet('admin/structure/layouts/manage/home');
    // Move the menu block to a region.
    $this->clickLink(t('Add block'), 3);
    $this->clickLink($edit['title']);
    $this->backdropPost(NULL, array(), t('Add block'));
    // Save the home page layout.
    $this->backdropPost('admin/structure/layouts/manage/home', array(), 'Save layout');
    $this->assertResponse(200);

    $edit = array();
    $edit['taxonomy_menu[vocab_parent]'] = 'menu-' . $machine_name . ':0';
    $this->backdropPost('admin/structure/taxonomy/' . $this->vocabulary->machine_name . '/configure', $edit, 'Save');

    $term = $this->term;
    $this->backdropGet('<front>');
    $this->assertLink($term->name);

    $term = $this->term;
    taxonomy_term_delete($term->tid);
    $this->backdropGet('<front>');

    $this->assertNoLink($term->name);
  }
}

/**
 * Tests for features requiring a taxonomy hierarchy
 */
class TaxonomyMenuHierarchyTest extends TaxonomyMenuWebTestCase {

  var $forest = array(
    "term1" => array(
      "term1_1" => TRUE,
      "term1_2" => array(
        "term1_2_1" => TRUE,
        "term1_2_2" => TRUE,
      ),
    ),
    "term2" => array(
      "term2_1" => TRUE,
      "term2_2" => TRUE,
    ),
    "term3" => TRUE
  );

  function setUp() {
    // Enable the taxonomy menu module.
    parent::setUp('taxonomy_menu');

    // Create an admin user and log them in.
    $perms = array(
      'access administration pages',
      'create post content',
      'administer layouts',
      'administer taxonomy',
      'administer menu',
    );
    $this->adminUser = $this->backdropCreateUser($perms);
    $this->backdropLogin($this->adminUser);

    // Create a vocabulary.
    $this->vocabulary = $this->createVocabulary();

    // Create terms.
    $this->terms = array();
    foreach ($this->forest as $name => $children) {
      $this->terms[] = new TaxonomyMenuTreeNode($this, NULL, $name, $children);
    }
  }

  function testTaxonomyMenuHierarchy() {
    $edit = array();
    $edit['taxonomy_menu[vocab_parent]'] = 'main-menu:0';
    $this->backdropPost('admin/structure/taxonomy/' . $this->vocabulary->machine_name . '/configure', $edit, 'Save');

    $this->assertResponse(200);

    // By default, auto expand is on: we must find the whole hierarchy.
    foreach ($this->terms as $term)  {
      $this->assertLink($term->name); // 1st level
      foreach ($term->children as $child) {
        $this->assertLink($child->name); // 2nd level
        foreach ($child->children as $granchild) {
          $this->assertLink($granchild->name); // 3 level
          // No sub level.
        }
      }
    }

    // Set auto expand to off.
    $edit = array();
    $edit['taxonomy_menu[options][expanded]'] = FALSE;
    $this->backdropPost('admin/structure/taxonomy/' . $this->vocabulary->machine_name . '/configure', $edit, 'Save');
    $this->assertResponse(200);

    // Set primary navigaiton menu to "tree" so we can test expanded.
    $this->backdropGet('admin/structure/layouts/manage/home');
    $this->clickLink('Configure', 1); // Off by one.
    $edit = array('block_settings[style]' => 'tree');
    $this->backdropPost(NULL, $edit, t('Update block'));
    $this->backdropPost('admin/structure/layouts/manage/home', array(), 'Save layout');

    // Set primary navigaiton menu to "tree" so we can test expanded.
    $this->backdropGet('admin/structure/layouts/manage/default');
    $this->clickLink('Configure', 1); // Off by one.
    $edit = array('block_settings[style]' => 'tree');
    $this->backdropPost(NULL, $edit, t('Update block'));
    $this->backdropPost('admin/structure/layouts/manage/default', array(), 'Save layout');

    // We should have links to the first level of the hierarchy only
    $this->backdropGet('<front>');
    // Confirm the primary links menu is NOT a drop-down.
    $this->assertNoRaw('class="menu-dropdown menu"');
    foreach ($this->terms as $term)  {
      $this->assertLink($term->name);
      foreach ($term->children as $child) {
        $this->assertNoLink($child->name);
      }
    }

    // Move to term1_2 : we should have links to
    // - 1st level
    // - siblings of term1_2
    // - children of term1_2
    $this->clickLink("term1");
    $this->clickLink("term1_2");

    // Confirm the primary links menu is NOT a drop-down.
    $this->assertNoRaw('class="menu-dropdown menu"');

    foreach ($this->terms as $term)  {
      $this->assertLink($term->name); // 1st level
      foreach ($term->children as $child) {
        // second level
        if ($term->name != "term1") {
          $this->assertNoLink($child->name);
        }
        else {
          // We must have a link AND the children.
          $this->assertLink($child->name);
          if ($child->name == "term1_2") {
            foreach ($child->children as $grandchild) {
              $this->assertLink($grandchild->name);
            }
          }
        }
      }
    }
  }
}

/**
 * Helper class to build the tree and keep data on hand.
 */
class TaxonomyMenuTreeNode {
  function __construct(&$testcase, $parent, $name, $children) {
    $this->name = $name;
    $this->children = array();
    $this->parent = $parent;

    $this->term = $testcase->createNewTerm($testcase->vocabulary, $name, $parent ? $parent->term : NULL);

    taxonomy_term_save($this->term);
    if (is_array($children)) {
      foreach ($children as $name => $grandchildren) {
        $this->children[$name] = new TaxonomyMenuTreeNode($testcase, $this, $name, $grandchildren);
      }
    }
  }

  function display($level = "") {
    foreach ($this->children as $child) {
      $child->display($level . "  ");
    }
  }
}

